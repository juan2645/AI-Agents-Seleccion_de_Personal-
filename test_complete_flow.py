#!/usr/bin/env python3
"""
Script de prueba para el flujo completo de programaci√≥n de entrevistas
Verifica que la interfaz web y los emails funcionen correctamente con fechas y horas espec√≠ficas
"""

import os
import sys
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# A√±adir el directorio src al path
sys.path.append('src')

from src.models import JobProfile, Candidate, InterviewSchedule
from src.email_manager import EmailAgent
from datetime import datetime, timedelta

def test_complete_interview_flow():
    """Prueba el flujo completo de programaci√≥n de entrevistas"""
    
    print("üß™ Probando flujo completo de programaci√≥n de entrevistas")
    print("=" * 60)
    
    # Verificar que la API key est√© configurada
    openai_api_key = os.getenv("OPENAI_API_KEY")
    if not openai_api_key:
        print("‚ùå OPENAI_API_KEY no est√° configurada en el archivo .env")
        return False
    
    print("‚úÖ API key de OpenAI configurada")
    
    # Configuraci√≥n SMTP de prueba
    smtp_config = {
        "smtp_server": "smtp.gmail.com",
        "smtp_port": 587,
        "email_user": "",
        "email_password": ""
    }
    
    # Crear EmailAgent
    email_agent = EmailAgent(openai_api_key, smtp_config)
    print("‚úÖ EmailAgent creado")
    
    # Crear candidato de prueba
    test_candidate = Candidate(
        id="test_001",
        name="Mar√≠a Gonz√°lez",
        email="maria.gonzalez@email.com",
        phone="+54 11 1234-5678",
        cv_text="CV de prueba",
        experience_years=3,
        skills=["Python", "FastAPI", "PostgreSQL", "Docker"],
        languages=["Espa√±ol", "Ingl√©s"],
        education=["Ingenier√≠a en Sistemas"],
        match_score=85.0,
        notes="Candidato de prueba con buena experiencia"
    )
    
    print("‚úÖ Candidato de prueba creado")
    
    # Simular entrevista programada con fecha y hora espec√≠ficas
    interview_date = datetime.now() + timedelta(days=3)  # 3 d√≠as desde ahora
    interview_time = "14:30"  # Hora espec√≠fica
    
    interview_info = {
        "scheduled": True,
        "date": interview_date.strftime("%Y-%m-%d"),
        "time": interview_time,
        "duration": 60,
        "interviewer": "Juan P√©rez - Tech Lead",
        "location": "Remoto (Google Meet)",
        "type": "T√©cnica",
        "notes": "La entrevista ser√° sobre Python, APIs REST y bases de datos. Por favor ten listo tu entorno de desarrollo y prep√°rate para una sesi√≥n de coding."
    }
    
    print(f"‚úÖ Informaci√≥n de entrevista preparada:")
    print(f"   - Fecha: {interview_info['date']}")
    print(f"   - Hora: {interview_info['time']}")
    print(f"   - Duraci√≥n: {interview_info['duration']} minutos")
    print(f"   - Entrevistador: {interview_info['interviewer']}")
    print(f"   - Ubicaci√≥n: {interview_info['location']}")
    
    # Probar email con informaci√≥n espec√≠fica de entrevista
    print("\nüìß Generando email con informaci√≥n espec√≠fica de entrevista...")
    try:
        email_template = email_agent.generate_personalized_email(
            candidate=test_candidate,
            template_type="selected",
            job_title="Desarrollador Python Senior",
            company_name="TechCorp",
            interview_info=interview_info
        )
        
        print("‚úÖ Email generado con informaci√≥n espec√≠fica de entrevista")
        print(f"   Asunto: {email_template.subject}")
        
        # Verificar que el email contiene la informaci√≥n espec√≠fica
        email_content = email_template.body
        
        checks = [
            ("Fecha espec√≠fica", interview_info['date'] in email_content),
            ("Hora espec√≠fica", interview_info['time'] in email_content),
            ("Duraci√≥n", str(interview_info['duration']) in email_content),
            ("Entrevistador", interview_info['interviewer'] in email_content),
            ("Ubicaci√≥n", interview_info['location'] in email_content),
            ("Tipo de entrevista", interview_info['type'] in email_content),
            ("Secci√≥n de entrevista programada", "ENTREVISTA PROGRAMADA" in email_content)
        ]
        
        print("\nüìã Verificaciones del contenido del email:")
        all_passed = True
        for check_name, passed in checks:
            status = "‚úÖ" if passed else "‚ùå"
            print(f"   {status} {check_name}: {'PAS√ì' if passed else 'FALL√ì'}")
            if not passed:
                all_passed = False
        
        if all_passed:
            print("\nüéâ ¬°Todas las verificaciones pasaron!")
            print("   El email contiene toda la informaci√≥n espec√≠fica de la entrevista.")
        else:
            print("\n‚ö†Ô∏è Algunas verificaciones fallaron.")
            print("   Revisar el contenido del email.")
        
        # Mostrar una muestra del contenido del email
        print(f"\nüìÑ Muestra del contenido del email:")
        print("=" * 50)
        lines = email_content.split('\n')
        for i, line in enumerate(lines[:20]):  # Mostrar primeras 20 l√≠neas
            if line.strip():
                print(f"{i+1:2d}: {line}")
        if len(lines) > 20:
            print("    ... (contenido adicional)")
        print("=" * 50)
        
        return all_passed
        
    except Exception as e:
        print(f"‚ùå Error generando email: {str(e)}")
        return False

def test_multiple_interviews():
    """Prueba el env√≠o de m√∫ltiples invitaciones de entrevista"""
    
    print("\nüì¨ Probando env√≠o de m√∫ltiples invitaciones...")
    
    # Configuraci√≥n SMTP de prueba
    smtp_config = {
        "smtp_server": "smtp.gmail.com",
        "smtp_port": 587,
        "email_user": "",
        "email_password": ""
    }
    
    # Crear EmailAgent
    email_agent = EmailAgent(os.getenv("OPENAI_API_KEY"), smtp_config)
    
    # Crear candidatos de prueba
    candidates = [
        Candidate(
            id="test_001",
            name="Mar√≠a Gonz√°lez",
            email="maria.gonzalez@email.com",
            phone="+54 11 1234-5678",
            cv_text="CV de prueba 1",
            experience_years=3,
            skills=["Python", "FastAPI"],
            languages=["Espa√±ol", "Ingl√©s"],
            education=["Ingenier√≠a en Sistemas"],
            match_score=85.0,
            notes="Candidato 1"
        ),
        Candidate(
            id="test_002",
            name="Carlos Rodr√≠guez",
            email="carlos.rodriguez@email.com",
            phone="+54 11 8765-4321",
            cv_text="CV de prueba 2",
            experience_years=5,
            skills=["Python", "Django", "PostgreSQL"],
            languages=["Espa√±ol"],
            education=["Ingenier√≠a en Inform√°tica"],
            match_score=90.0,
            notes="Candidato 2"
        )
    ]
    
    # Informaci√≥n de entrevistas con fechas y horas espec√≠ficas
    interviews_info = {
        "maria.gonzalez@email.com": {
            "scheduled": True,
            "date": "2025-09-10",
            "time": "14:00",
            "duration": 60,
            "interviewer": "Juan P√©rez - Tech Lead",
            "location": "Remoto (Google Meet)",
            "type": "T√©cnica",
            "notes": "Entrevista t√©cnica sobre Python y APIs REST. Prep√°rate para coding."
        },
        "carlos.rodriguez@email.com": {
            "scheduled": True,
            "date": "2025-09-11",
            "time": "10:30",
            "duration": 45,
            "interviewer": "Ana Garc√≠a - HR Manager",
            "location": "Presencial - Oficina Principal",
            "type": "HR",
            "notes": "Entrevista de recursos humanos. Trae documentos originales."
        }
    }
    
    try:
        # Generar emails para cada candidato
        for candidate in candidates:
            candidate_interview_info = interviews_info.get(candidate.email)
            
            email_template = email_agent.generate_personalized_email(
                candidate=candidate,
                template_type="selected",
                job_title="Desarrollador Python Senior",
                company_name="TechCorp",
                interview_info=candidate_interview_info
            )
            
            print(f"‚úÖ Email generado para {candidate.name}")
            print(f"   - Fecha: {candidate_interview_info['date']}")
            print(f"   - Hora: {candidate_interview_info['time']}")
            print(f"   - Duraci√≥n: {candidate_interview_info['duration']} minutos")
            print(f"   - Entrevistador: {candidate_interview_info['interviewer']}")
            print(f"   - Ubicaci√≥n: {candidate_interview_info['location']}")
            print(f"   - Tipo: {candidate_interview_info['type']}")
        
        print("‚úÖ Todos los emails generados correctamente con informaci√≥n espec√≠fica")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en env√≠o m√∫ltiple: {str(e)}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando pruebas del flujo completo de programaci√≥n de entrevistas")
    print("=" * 60)
    
    # Ejecutar pruebas
    test1_passed = test_complete_interview_flow()
    test2_passed = test_multiple_interviews()
    
    print("\n" + "=" * 60)
    print("üìã RESUMEN DE PRUEBAS:")
    print(f"   - Flujo completo con fecha/hora espec√≠fica: {'‚úÖ PAS√ì' if test1_passed else '‚ùå FALL√ì'}")
    print(f"   - M√∫ltiples invitaciones con detalles: {'‚úÖ PAS√ì' if test2_passed else '‚ùå FALL√ì'}")
    
    if test1_passed and test2_passed:
        print("\nüéâ ¬°Flujo completo funcionando correctamente!")
        print("   ‚úÖ El bot√≥n de programar entrevistas funciona")
        print("   ‚úÖ Los emails incluyen fecha y hora espec√≠ficas")
        print("   ‚úÖ La informaci√≥n de entrevista se muestra correctamente")
    else:
        print("\n‚ö†Ô∏è  Algunas pruebas fallaron. Revisar la implementaci√≥n.")
    
    print("=" * 60)
